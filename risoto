#! /bin/bash
#
# For an introduction on how to create bootable iso:
# http://wiki.osdev.org/El-Torito
#
# Inspired by archiso tool available on Archlinux.
#

usage() {
	echo >&2 "$(basename $0): [-v] [--output=<output>] [--compressor=<squashfs-comp>] [--tmpdir=<dir>] <config-file> <target>"
	exit
}

warn() {
	echo >&2 $*
}

die() {
	echo >&2 $*
	exit 1
}

xchroot() {
	if test $rootfs = '/'; then
		"$@"
		return
	fi
	chroot $rootfs env -i PATH=bin:/usr/bin:/sbin:/usr/sbin "$@"
}

get_file_arch() {
	case $(file -L -b $1) in
	ELF\ 64-bit*)	echo x86_64 ;;
	ELF\ 32-bit*)	echo x86_32 ;;
	*)		die "can't guess file bin arch: $1"
	esac
}

_excluded_files=()
exclude_file() {
	# drop the leading '/' for mksquashfs.
	_excluded_files+=("${1##/}")
}

cleanup_on_exit() {
	test $homedir && umount $homedir
	test $srvdir  && umount $srvdir
	test $espdir  && umount $espdir
	test $rootdir && umount $rootdir
	test $rootdir && rmdir $rootdir
	test $loopdev && losetup -d $loopdev
	$clean_tmpdir && rm -fr $tmpdir
}
trap cleanup_on_exit 0

#
# Prepare the target.
#
GPT_ROOT_X86_64=4f68bce3-e8cd-4db1-96e7-fbcaf984b709
GPT_ESP=c12a7328-f81f-11d2-ba4b-00a0c93ec93b
GPT_HOME=933ac7e1-2eb4-4f13-b844-0e14e2aef915
GPT_SWAP=0657fd6d-a4ab-43c4-84e5-0933c84b4f4f
GPT_SRV=3b8f8425-20e0-4f3b-907f-1a25a76f98e8

rootdir=
espdir=
homedir=
srvdir=

loopdev=

prepare_image() {
	local image=$1

	#
	# According to man losetup(8), -P (aka --partscan) is used to
	# scan the partition table on a newly created loop device.
	#
	# Unfortunately losetup(8) does that during the loop device
	# setup by setting LO_FLAGS_PARTSCAN flag, it doesn't issue a
	# separate ioctl(BLKRRPART) and check the return value. In
	# that case, the kernel can fail *silently* to scan the
	# partition table because another process (udev) is accessing
	# (exclusively) to the created loop.
	#
	# Therefore we manually force the kernel to scan the partition
	# table by issuing an ioctl(BLKRRPART) with blockdev(8).
	#
	# However we still use the -P option for losetup(8). Indeed
	# since commit e03c8dd14915fabc101aa495828d58598dc5af98,
	# setting LO_FLAGS_PARTSCAN indicates that we want partition
	# table scanning for that single loop. This removes the need
	# to set max_part > 0, max_part being the driver parameter
	# used to enable global partition scanning (for all loop
	# devices).
	#
	losetup -P --read-only -f $image &&
	loopdev=$(losetup -j $image) &&
	loopdev=${loopdev%%:*} &&

	#
	# Since the loop device has just been set make sure udev has
	# updated its DB accordingly. Also make sure udev won't
	# prevent the re-scanning of the part table.
	#
	udevadm settle &&

	#
	# Force the kernel to re-read the partition table since it may
	# have failed previously during the loop device setup.
	#
	blockdev --rereadpt $loopdev &&

	#
	# Make sure udev caught the new event about creation of loop's
	# partitions.
	#
	udevadm settle
}

prepare_device() {
	local dev=$1

	for p in $dev*; do
		properties=$(udevadm info --query=property --export --name=$p) &&
		eval "$properties" ||
		return

		case $DEVTYPE in
		disk)
			test $ID_PART_TABLE_TYPE != 'gpt' &&
			break
			;;
		partition)
			case $ID_PART_ENTRY_TYPE in
			$GPT_ROOT_X86_64)	root=$DEVNAME ;;
			$GPT_ESP)		esp=$DEVNAME ;;
			$GPT_HOME)		home=$DEVNAME ;;
			$GPT_SRV)		srv=$DEVNAME ;;
			*)			;;
			esac
		esac
	done

	if ! test $root; then
		warn 'Failed to find the root partition. The device or image'
		warn 'you provided must use a GUID Partition Table and must'
		warn 'follow this specification in order to be mounted by risoto'
		warn 'automatically:'
		warn
		warn 'http://www.freedesktop.org/wiki/Specifications/DiscoverablePartitionsSpec/'
		return 1
       fi

	# Mount all discovered partitions
	rootdir=$(mktemp -d --tmpdir $(basename $0).rootdir.XXXXX) &&
	mount -o ro $root $rootdir ||
	return

	if test $esp; then
		# assume ESP mountpoint is /boot
		mount -o ro $esp $rootdir/boot &&
		espdir=$rootdir/boot ||
		return
	fi
	if test $home; then
		mount -o ro $home $rootdir/home &&
		homedir=$rootdir/home ||
		return
	fi
	if test $srv; then
		mount -o ro $srv $rootdir/srv &&
		srvdir=$rootdir/srv ||
		return
	fi
}


prepare_rootfs() {
	target=$(readlink -f $1)

	if test -f "$target"; then
		prepare_image "$target" &&
		target=$loopdev ||
		return
	fi

	if test -b "$target"; then
		prepare_device "$target" &&
		target=$rootdir ||
		return
	fi

	if test -d "$target"; then
		rootfs=$target
		return
	fi

	warn "invalid target: must be a fs device/image or a directory."
}


#
# Parse passed options.
#
clean_tmpdir=true
tmpdir=
verbose=false
compressor=
conf=
iso_fname=
iso_dname=$(pwd)

while :
do
	case $1 in
	-v|--verbose)
		verbose=true ;;
	--compressor=*)
		compressor=${1#--compressor=} ;;
	--output=*)
		iso_fname=${1#--output=} ;;
	--tmpdir=*)
		clean_tmpdir=false
		tmpdir=${1#--tmpdir=} ;;
	--exclude=*)
		exclude_file $(readlink -f ${1#--exclude=}) ;;
	-*)
		usage ;;
	*)
		break
	esac
	shift
done

pushd . >/dev/null

test $# -eq 2 ||
usage

#
# Make sure if iso filename was passed then it uses a correct path.
#
if test -n "$iso_fname"; then
	iso_dname=$(dirname $iso_fname)
	test -d "$iso_dname" ||
	die "invalid path given by --output."
fi

#
# Setup 'tmpdir'
#
if test -z "$tmpdir"; then
	#
	# By default the working directory, which can be big since it
	# contains the squashfs image, is put in the output dir.
	#
	tmpdir=$(mktemp -d --tmpdir="$iso_dname" $(basename $0).XXXXX)
fi

tmpdir=$(readlink -e "$tmpdir") ||
die "Invalid temporary directory: '$tmpdir'"

#
# Read the config file
#
conf=$(readlink -f $1)
test -r "$conf" && source "$conf" ||
die "Failed to read config file: $conf"

: ${compressor:=$SQUASHFS_COMPRESSOR}

#
# Prepare the target, if needed, so we can access the fs at $rootfs
# directory.
#
prepare_rootfs "$2" ||
exit

#
# Setup a couple of global vars. Most of them are 'exported' to the
# bootloader's config files.
#
distributor=$(xchroot lsb_release -is)
distribution=$(xchroot lsb_release -ds)
distribution=$(eval echo $distribution) # drop the stupid double quotes

iso_label=${distributor}_$(date +%Y%m%d)
if test -z "$iso_fname"; then
	iso_fname=${distribution// /-}-live-$(date +%Y%m%d).iso
	iso_fname=$(echo $iso_fname | tr "[:upper:]" "[:lower:]")
fi

vmlinux=$rootfs/boot/vmlinuz-*
initramfs=$rootfs/boot/initr*-*.img

# arch is the rootfs architecture. We assume that the kernel's arch is
# the same.
arch=$(get_file_arch $rootfs/usr/bin/ld)

# Where the kernel and initramfs will be found by a bios system.
bios_vmlinux=$distributor/boot/$arch/vmlinuz
bios_initramfs=$distributor/boot/$arch/initramfs.img

# Where the kernel and initramfs will be found by a uefi system.
uefi_vmlinux=EFI/$distributor/vmlinuz
uefi_initramfs=EFI/$distributor/initramfs.img

# The place where we store the RO image of the rootfs.
rootfs_ro_image=$distributor/$arch/rootfs.squashfs

#
#
#
parse_bootloader_conf () {
	sed -e "s|@@ISO_LABEL@@|$iso_label|"			\
		-e "s|@@DISTRIBUTOR@@|$distributor|"		\
		-e "s|@@DISTRIBUTION@@|$distribution|"		\
		-e "s|@@ROOTFS_RO_IMAGE@@|/$rootfs_ro_image|"	\
		-e "s|@@BIOS_VMLINUX@@|/$bios_vmlinux|"		\
		-e "s|@@BIOS_INITRAMFS@@|/$bios_initramfs|"	\
		-e "s|@@UEFI_VMLINUX@@|/$uefi_vmlinux|"		\
		-e "s|@@UEFI_INITRAMFS@@|/$uefi_initramfs|" $1
}

install_syslinux() {
	local config

	# Relative path is relative to the installation config file.
	case $SYSLINUX_CONFIG in
	'')
		warn 'You must provide a path to the syslinux config file.'
		return 1 ;;
	/*)
		config=$SYSLINUX_CONFIG ;;
	*)
		config=$(dirname $conf)/$SYSLINUX_CONFIG ;;
	esac

	test -f "$config" || {
		warn "Failed to read syslinux config file: '$config'."
		return 1
	}

	# import kernel image
	mkdir -p $(dirname $bios_vmlinux)
	cp $initramfs $bios_initramfs
	cp $vmlinux   $bios_vmlinux

	mkdir -p $distributor/boot/syslinux
	cd $distributor/boot/syslinux

	# Import syslinux from its directory installation. We should
	# probably use /boot instead.
	cp $rootfs/usr/lib/syslinux/bios/ldlinux.c32 .
	cp $rootfs/usr/lib/syslinux/bios/menu.c32 .
	cp $rootfs/usr/lib/syslinux/bios/libutil.c32 .

	parse_bootloader_conf $config >syslinux.cfg

	cd - >/dev/null
}

install_isolinux() {
	# prepare /isolinux
	mkdir -p isolinux
	cd isolinux

	cp $rootfs/usr/lib/syslinux/bios/isolinux.bin .
	cp $rootfs/usr/lib/syslinux/bios/isohdpfx.bin .
	cp $rootfs/usr/lib/syslinux/bios/ldlinux.c32  .

	cat >isolinux.cfg<<EOF
PATH /$distributor/boot/syslinux/
DEFAULT loadconfig

LABEL loadconfig
  CONFIG /$distributor/boot/syslinux/syslinux.cfg
EOF
	cd - >/dev/null
}

install_gummiboot() {
	local config

	# Relative path is relative to the installation config file.
	case $GUMMIBOOT_CONFIG in
	'')
		warn "no gummiboot config file provided, skipping gummiboot installation."
		return 0 ;;
	/*)
		config=$GUMMIBOOT_CONFIG ;;
	*)
		config=$(dirname $conf)/$GUMMIBOOT_CONFIG ;;
	esac

	test -f $rootfs/usr/lib/gummiboot/gummibootx64.efi || {
		warn "gummiboot is missing: only BIOS systems will be supported."
		return 0
	}

	#
	# Retrieve the default entry
	#
	test -f "$config" || {
		warn "Failed to read '$config'."
		return 1
	}

	default=$(sed -ne 's/^[[:space:]]*default[[:space:]]*//p' $config)
	test $default || {
		warn "Default entry is missing from the gummiboot config file."
		return 1
	}

	default_conf=$(dirname $config)/$default.conf.in
	test -f $default_conf || {
		warn "Failed to read config file for gummiboot's default entry."
		return 1
	}

	#
	# UEFI: create efitboot.img and mark it as a alternative boot image.
	#
	mkdir -p EFI/$distributor
	pushd EFI >/dev/null

	truncate -s 31M $distributor/efiboot.img
	mkfs.vfat -n ISO_EFI $distributor/efiboot.img >/dev/null

	# mount efiboot.img and make sure it gets unmounted whatever
	# the way we return from this function.
	mount $distributor/efiboot.img $distributor
	cd $distributor
	umount -l ../$distributor

	mkdir -p $(dirname $uefi_vmlinux)

	cp $vmlinux $uefi_vmlinux
	cp $initramfs $uefi_initramfs

	mkdir -p EFI/boot
	cp $rootfs/usr/lib/gummiboot/gummibootx64.efi EFI/boot/BOOTX64.EFI

	mkdir -p loader/entries
	cp $config loader/loader.conf
	parse_bootloader_conf $default_conf >loader/entries/$default.conf

	cd ..

	# additionnal xorriso options.
	xorriso_efi_args="-eltorito-alt-boot
                   -e EFI/$distributor/efiboot.img
                   -no-emul-boot
                   -isohybrid-gpt-basdat"

	popd >/dev/null
}

create_rootfs_image() {
	#
	# generate rootfs squashfs image
	#
	mkdir -p $(dirname $rootfs_ro_image)

	# Ignore the *content* of these directories.
	exclude_file /boot/\*
	exclude_file /sys/\*
	exclude_file /proc/\*
	exclude_file /dev/\*
	exclude_file /mnt/\*
	exclude_file /etc/fstab
	test $rootfs = '/' && exclude_file $tmpdir

	# The command line interface of mksquashfs sucks, really.
	if $verbose; then
		exec 3>&1
	else
		exec 3>/dev/null
	fi

	warn "Creating SquashFS image for rootfs, this may take a while..."
	#
	# mksquashfs source1 source2 ...  dest [options] [-e list of exclude dirs/files]
	#
	# WTH is this fancy command line interface ??
	#
	mksquashfs $rootfs $rootfs_ro_image \
		-noappend \
		${compressor:+-comp $compressor} \
		-wildcards \
		-e "${_excluded_files[@]}" >&3
}

create_iso() {
	#
	# Build the ISO
	#
	warn "Creating ISO image $(basename $iso_fname)..."
	xorriso -as mkisofs \
		$($verbose || echo -quiet) \
		-iso-level 3 \
		-full-iso9660-filenames \
		-volid "$iso_label" \
		-appid "$distribution Live CD" \
		-publisher "$distributor" \
		-preparer "prepared by $(basename $0)" \
		-eltorito-boot isolinux/isolinux.bin \
		-eltorito-catalog isolinux/boot.cat \
		-no-emul-boot -boot-load-size 4 -boot-info-table \
		-isohybrid-mbr $tmpdir/isolinux/isohdpfx.bin \
		$xorriso_efi_args \
		-output $1 \
		$2
}


pushd $tmpdir >/dev/null
install_syslinux &&
install_isolinux &&
install_gummiboot &&
create_rootfs_image ||
exit
popd >/dev/null

create_iso $iso_fname $tmpdir ||
exit

#
# Show some stats.
#
if type iso-info &>/dev/null; then
	iso-info --no-header $iso_fname
fi
echo
echo "__________________________________"
ls -lh $iso_fname
cd $tmpdir
tree .
echo
ls -lh $distributor/$arch/rootfs.squashfs \
	$distributor/boot/$arch/vmlinuz \
	$distributor/boot/$arch/initramfs.img
echo
